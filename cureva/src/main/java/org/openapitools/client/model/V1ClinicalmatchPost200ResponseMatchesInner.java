/*
 * Clinical Match API
 * A simple API to match patients to clinical trials.
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Location;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V1ClinicalmatchPost200ResponseMatchesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-18T19:57:05.929993-05:00[America/New_York]", comments = "Generator version: 7.10.0")
public class V1ClinicalmatchPost200ResponseMatchesInner {
  public static final String SERIALIZED_NAME_TRIAL_ID = "trialId";
  @SerializedName(SERIALIZED_NAME_TRIAL_ID)
  @javax.annotation.Nullable
  private String trialId;

  public static final String SERIALIZED_NAME_TRIAL_NAME = "trialName";
  @SerializedName(SERIALIZED_NAME_TRIAL_NAME)
  @javax.annotation.Nullable
  private String trialName;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  @javax.annotation.Nullable
  private List<Location> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  @javax.annotation.Nullable
  private String summary;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private String status;

  public V1ClinicalmatchPost200ResponseMatchesInner() {
  }

  public V1ClinicalmatchPost200ResponseMatchesInner trialId(@javax.annotation.Nullable String trialId) {
    this.trialId = trialId;
    return this;
  }

  /**
   * The ID of the matched clinical trial
   * @return trialId
   */
  @javax.annotation.Nullable
  public String getTrialId() {
    return trialId;
  }

  public void setTrialId(@javax.annotation.Nullable String trialId) {
    this.trialId = trialId;
  }


  public V1ClinicalmatchPost200ResponseMatchesInner trialName(@javax.annotation.Nullable String trialName) {
    this.trialName = trialName;
    return this;
  }

  /**
   * The name of the clinical trial
   * @return trialName
   */
  @javax.annotation.Nullable
  public String getTrialName() {
    return trialName;
  }

  public void setTrialName(@javax.annotation.Nullable String trialName) {
    this.trialName = trialName;
  }


  public V1ClinicalmatchPost200ResponseMatchesInner locations(@javax.annotation.Nullable List<Location> locations) {
    this.locations = locations;
    return this;
  }

  public V1ClinicalmatchPost200ResponseMatchesInner addLocationsItem(Location locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * Get locations
   * @return locations
   */
  @javax.annotation.Nullable
  public List<Location> getLocations() {
    return locations;
  }

  public void setLocations(@javax.annotation.Nullable List<Location> locations) {
    this.locations = locations;
  }


  public V1ClinicalmatchPost200ResponseMatchesInner summary(@javax.annotation.Nullable String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Detailed description of the clinical trial
   * @return summary
   */
  @javax.annotation.Nullable
  public String getSummary() {
    return summary;
  }

  public void setSummary(@javax.annotation.Nullable String summary) {
    this.summary = summary;
  }


  public V1ClinicalmatchPost200ResponseMatchesInner status(@javax.annotation.Nullable String status) {
    this.status = status;
    return this;
  }

  /**
   * Status about the clinical trial
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1ClinicalmatchPost200ResponseMatchesInner v1ClinicalmatchPost200ResponseMatchesInner = (V1ClinicalmatchPost200ResponseMatchesInner) o;
    return Objects.equals(this.trialId, v1ClinicalmatchPost200ResponseMatchesInner.trialId) &&
        Objects.equals(this.trialName, v1ClinicalmatchPost200ResponseMatchesInner.trialName) &&
        Objects.equals(this.locations, v1ClinicalmatchPost200ResponseMatchesInner.locations) &&
        Objects.equals(this.summary, v1ClinicalmatchPost200ResponseMatchesInner.summary) &&
        Objects.equals(this.status, v1ClinicalmatchPost200ResponseMatchesInner.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trialId, trialName, locations, summary, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1ClinicalmatchPost200ResponseMatchesInner {\n");
    sb.append("    trialId: ").append(toIndentedString(trialId)).append("\n");
    sb.append("    trialName: ").append(toIndentedString(trialName)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("trialId");
    openapiFields.add("trialName");
    openapiFields.add("locations");
    openapiFields.add("summary");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1ClinicalmatchPost200ResponseMatchesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1ClinicalmatchPost200ResponseMatchesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1ClinicalmatchPost200ResponseMatchesInner is not found in the empty JSON string", V1ClinicalmatchPost200ResponseMatchesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1ClinicalmatchPost200ResponseMatchesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1ClinicalmatchPost200ResponseMatchesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("trialId") != null && !jsonObj.get("trialId").isJsonNull()) && !jsonObj.get("trialId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trialId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trialId").toString()));
      }
      if ((jsonObj.get("trialName") != null && !jsonObj.get("trialName").isJsonNull()) && !jsonObj.get("trialName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trialName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trialName").toString()));
      }
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) {
        JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
        if (jsonArraylocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
          }

          // validate the optional field `locations` (array)
          for (int i = 0; i < jsonArraylocations.size(); i++) {
            Location.validateJsonElement(jsonArraylocations.get(i));
          };
        }
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1ClinicalmatchPost200ResponseMatchesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1ClinicalmatchPost200ResponseMatchesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1ClinicalmatchPost200ResponseMatchesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1ClinicalmatchPost200ResponseMatchesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<V1ClinicalmatchPost200ResponseMatchesInner>() {
           @Override
           public void write(JsonWriter out, V1ClinicalmatchPost200ResponseMatchesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1ClinicalmatchPost200ResponseMatchesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1ClinicalmatchPost200ResponseMatchesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1ClinicalmatchPost200ResponseMatchesInner
   * @throws IOException if the JSON string is invalid with respect to V1ClinicalmatchPost200ResponseMatchesInner
   */
  public static V1ClinicalmatchPost200ResponseMatchesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1ClinicalmatchPost200ResponseMatchesInner.class);
  }

  /**
   * Convert an instance of V1ClinicalmatchPost200ResponseMatchesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

