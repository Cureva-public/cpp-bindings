/*
 * Clinical Match API
 * A simple API to match patients to clinical trials.
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.V1ClinicalmatchPost200Response;
import org.openapitools.client.model.V1ClinicalmatchPost400Response;
import org.openapitools.client.model.V1ClinicalmatchPostRequestLocation;
import org.openapitools.client.model.VersionGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1ClinicalmatchPost
     * @param patientNotesFile The file containing notes about the patient from the doctor visit in plain text format. (required)
     * @param fileSizeBytes The number of bytes in the patient notes file. (required)
     * @param location  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Matching clinical trials </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request format or file size mismatch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ClinicalmatchPostCall(File patientNotesFile, byte[] fileSizeBytes, V1ClinicalmatchPostRequestLocation location, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/clinicalmatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (patientNotesFile != null) {
            localVarFormParams.put("patientNotesFile", patientNotesFile);
        }

        if (fileSizeBytes != null) {
            localVarFormParams.put("fileSizeBytes", fileSizeBytes);
        }

        if (location != null) {
            localVarFormParams.put("location", location);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ClinicalmatchPostValidateBeforeCall(File patientNotesFile, byte[] fileSizeBytes, V1ClinicalmatchPostRequestLocation location, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'patientNotesFile' is set
        if (patientNotesFile == null) {
            throw new ApiException("Missing the required parameter 'patientNotesFile' when calling v1ClinicalmatchPost(Async)");
        }

        // verify the required parameter 'fileSizeBytes' is set
        if (fileSizeBytes == null) {
            throw new ApiException("Missing the required parameter 'fileSizeBytes' when calling v1ClinicalmatchPost(Async)");
        }

        return v1ClinicalmatchPostCall(patientNotesFile, fileSizeBytes, location, _callback);

    }

    /**
     * Submit patient notes for clinical trial matching
     * Submits a file containing doctor notes about a patient, and a byte count for the file, to find relevant clinical trials.
     * @param patientNotesFile The file containing notes about the patient from the doctor visit in plain text format. (required)
     * @param fileSizeBytes The number of bytes in the patient notes file. (required)
     * @param location  (optional)
     * @return V1ClinicalmatchPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Matching clinical trials </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request format or file size mismatch </td><td>  -  </td></tr>
     </table>
     */
    public V1ClinicalmatchPost200Response v1ClinicalmatchPost(File patientNotesFile, byte[] fileSizeBytes, V1ClinicalmatchPostRequestLocation location) throws ApiException {
        ApiResponse<V1ClinicalmatchPost200Response> localVarResp = v1ClinicalmatchPostWithHttpInfo(patientNotesFile, fileSizeBytes, location);
        return localVarResp.getData();
    }

    /**
     * Submit patient notes for clinical trial matching
     * Submits a file containing doctor notes about a patient, and a byte count for the file, to find relevant clinical trials.
     * @param patientNotesFile The file containing notes about the patient from the doctor visit in plain text format. (required)
     * @param fileSizeBytes The number of bytes in the patient notes file. (required)
     * @param location  (optional)
     * @return ApiResponse&lt;V1ClinicalmatchPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Matching clinical trials </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request format or file size mismatch </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1ClinicalmatchPost200Response> v1ClinicalmatchPostWithHttpInfo(File patientNotesFile, byte[] fileSizeBytes, V1ClinicalmatchPostRequestLocation location) throws ApiException {
        okhttp3.Call localVarCall = v1ClinicalmatchPostValidateBeforeCall(patientNotesFile, fileSizeBytes, location, null);
        Type localVarReturnType = new TypeToken<V1ClinicalmatchPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit patient notes for clinical trial matching (asynchronously)
     * Submits a file containing doctor notes about a patient, and a byte count for the file, to find relevant clinical trials.
     * @param patientNotesFile The file containing notes about the patient from the doctor visit in plain text format. (required)
     * @param fileSizeBytes The number of bytes in the patient notes file. (required)
     * @param location  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Matching clinical trials </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request format or file size mismatch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ClinicalmatchPostAsync(File patientNotesFile, byte[] fileSizeBytes, V1ClinicalmatchPostRequestLocation location, final ApiCallback<V1ClinicalmatchPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ClinicalmatchPostValidateBeforeCall(patientNotesFile, fileSizeBytes, location, _callback);
        Type localVarReturnType = new TypeToken<V1ClinicalmatchPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for versionGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API version information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call versionGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return versionGetCall(_callback);

    }

    /**
     * Get API version
     * Returns the version of the Clinical Match API.
     * @return VersionGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API version information </td><td>  -  </td></tr>
     </table>
     */
    public VersionGet200Response versionGet() throws ApiException {
        ApiResponse<VersionGet200Response> localVarResp = versionGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get API version
     * Returns the version of the Clinical Match API.
     * @return ApiResponse&lt;VersionGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API version information </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VersionGet200Response> versionGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = versionGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<VersionGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get API version (asynchronously)
     * Returns the version of the Clinical Match API.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API version information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionGetAsync(final ApiCallback<VersionGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = versionGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<VersionGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
